<html>
    <p>
        To create my own website, I generally followed Jake Wright's youtube guides on HTML and CSS and only edited some parts to suit my own preferances. 
        Thus, my website will look very similar to his example.<br>
        <br>
        <a href="https://www.youtube.com/c/JakewrightNet">Jake Wright's youtube channel</a>
    </p>

    <h2>Writing in HTML</h2>
    <p>
        Among my files, I have my three main pages, the index, about and projects page, in the main folder and everything else sorted into sub-folders, such 
        as an images folder and another folder that contains all the dedicated documentation pages for each project I have done. For every different content
        in my website, there will be a new file and page created, and pages with similar content are categorised to keep things organised and easy to understand<br>
        <br>
        Below will explain the layout of my website pages and some of the HTML functions used to create it.
    </p>

    <h3>Basic layout</h3>
    <p>
        Everything in my website and the layout choices are kept simple, straighforward and organised neatly to provide ease of use and navigation.<br>
        I have a main website header and a navigation bar present at the top across all pages so that the layout will be consistent. Only the main contents 
        of the page below that will change, and all pages have a header at the start to introduce the content of the page.
    </p>

    <h3>Home/Index page</h3>
    <p>
        The home page is the only page with a different layout to keep it from being too boring. Since the home page also does not have much content on my 
        website, I decided that it would look better with everything centralised.<br>
        <br>
        Since I wanted to centralise everything in the home page, I wrote as if it were and would later shift and organise with CSS.<br>
        I used a table to list out items in my navigation bar horizontally and later used CSS to space them out.<br>
        I decided on a simple page header, "HOME", and added bars to both sides to fill up the page, and gave a simple and straightforward introduction to 
        the use of the website below the header.<br>
        I also decided to display my EP1000 certifications on the home page, such as the passing of the lab safety and 3D printing online test, so that it 
        can be easily seen for the module assessment. This may be later changed after completion of the module.
    </p>

    <h3>About page</h3>
    <p>
        In my about page, I put a profile picture and used a table function to wrap text containing some basic personal details to the side of it, similar
        to an IC card or ID part of a passport.<br>
        <br>
        Below that I put a thin line across the page to seperate the rest of the about page that will provide further introduction to myself, such as
        the breif write-up about myself and some interests.
    </p>

    <h3>Projects page</h3>
    <p>
        I decided that my main projects page will just list out most projects that I have done or will be doing, as well as provide links to the dedicated
        documentation page. So I put a page header and a very short introduction to the page at the top, and use list functions to provide links to the documentation
        page. The page is sorted with headers and seperate list functions according to methods used or type of projects.
    </p>


    <p>
        This part will go through creating a HTML text file, formating and adding content. This is all done using a text editor, which I chose
        to use Visual Studo Code.
    </p>

    <p>End product: <a href="https://darryloch.github.io/EP1000/Examples/HTML_example.html">example site</a></p>

    <h3>1. Creating a HTML text file</h3>
    <img src="https://darryloch.github.io/EP1000/images/file_creation.png" alt="html file format" height="250">
    <p>
        In the text editor workspace, create a new folder to contain all the work that will be done in this project.<br>
        <br>
        In the new folder, create a new text file, type &lt;!DOCTYPE html&gt;, and then type &lt;html lang="en"&gt;.<br>
        "!DOCTYPE" declares the file as a HTML file, and "/html lang="en"" declares that the text language is english.<br>
        <br>
        Next, type &lt;html&gt;&lt;/html&gt;.<br>
        Everything will be written within the html commands.<br>
        <br>
        This first file will be the index, or home, page.<br>
        Make sure tp save the file and end the name it "index" and end with ".html" so that the computer will recognise it as a html file.
    </p>

    <h3>2. Title your webpage and create a webpage body</h3>
    <img src="https://darryloch.github.io/EP1000/images/Title_and_body.png" alt="Page title and body commands" height="250">
    <img src="https://darryloch.github.io/EP1000/images/tab_title.png" alt="tab title" height="200">
    <p>
        To create a title for the webpage, &lt;head&gt;&lt;/head&gt; is used.<br>
        Within the head commands, type &lt;(your title here)&gt; and insert the title you want to use.
    </p>
    <p>
        After the head commands, type &lt;body&gt;&lt;/body&gt; to declare the main body of the webpage.<br>
        Everything that will be presented in the webpage will be within the body commands.
    </p>

    <h3>3. Headers and body texts</h3>
    <img src="https://darryloch.github.io/EP1000/images/headers_paragraph_text.png" alt="headers and text paragraphs" height="250">
    <img src="https://darryloch.github.io/EP1000/images/headers_text_show.png" alt="website look" width="780">
    <p>
        &lt;h1&gt;&lt;/h1&gt; is used for headers. Header size ranges from 1-6, where h1 is the largest.<br>
        &lt;p&gt;&lt;/p&gt; is used to indicate a text paragraph.<br>
        &lt;br&gt; is used to indicate a line break to start on a new line.<br>

        Start of by creating a &lt;h1&gt; header to use as the main header across all pages in the website, e.g. "Project Webpage".<br>
        Afterwards use the &lt;p&gt; command and give a brief introduction to your webpage.<br>
        <br>
        From there, you can choose to add in any additional content to be put in the index page and freely make use of the 
        header and paragraph commands. Since this first page will be your index, or home, page, you can fill in content you
        wish to be on your home page.
    </p>

    <h3>4. About page</h3>
    <img src="https://darryloch.github.io/EP1000/images/create_about_eg.png" alt="create about page" height="100">
    <p>
        With the home page created, now an about website author can be created as well. I chose to put this in a new page, and the example will
        follow. Create a new file and enter the &lt;html&gt; commmand to start and add in your website and page header.
    </p>

    <h3>5. linking images</h3>
    <img src="https://darryloch.github.io/EP1000/images/img_linking_eg.png" alt="example pic linking" width="780">
    <img src="https://darryloch.github.io/EP1000/images/profilepic_eg.png" alt="example pic" height="200">
    <p>
        To keep things organised, create a folder to keep all saved images used in the website.<br>
        to link images, the command &lt;img src="" alt=""&gt; is used. "src" is for the location of the image in your folder (e.g. images/img.png), 
        and "alt" is the alternative name for the image to show in case the image does not load properly. The size can be controlled by 
        using height="(insert pixel number)" within the img command.<br>
        <br>
        Use this to insert a profile picture in your about page and to add any other images.
    </p>

    <h3>6. Tables</h3>
    <p>
        You can make use of tables to wrap text around images, apart from normal usage.
        Start with the &lt;table&gt; command to declare the use of a table, then use &lt;tr&gt; for rows and &lt;td&gt; for columns inside the command.<br>
        Always put the rows first then the columns inside the row command.<br>
        <br>
        Insert a row in the table commands and use one &lt;td&gt; to hold your profile picture, and a second &lt;td&gt; for some personal information.
    </p>

    <br>

    <h2>Styling with CSS (Cascading Style Sheets)</h2>
    <img src="https://darryloch.github.io/projects/images/CSS_example.png" alt="CSS" height="250">
    <p>
        After creating a working webpage in HTML. A CSS text file was then used to make my web pages look nicer. This called for learning another coding format.
        CSS allowed me to set a border for different text bodies, shift text bodies to different parts of the pages, change background colours. 
        I could also further edit the look of the page content, such as text alignment, font type, font colour and font size. 
        For this part, I followed Jake Wright's youtube video guide "Learn CSS in 12 minutes", while adding in my own preferences.
    </p>
</html>
